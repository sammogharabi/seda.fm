name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "JWT_SECRET=test_jwt_secret_for_ci" >> $GITHUB_ENV
          echo "SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=test_anon_key" >> $GITHUB_ENV
          echo "FEATURE_PROFILES=true" >> $GITHUB_ENV
          echo "FEATURE_PLAYLISTS=true" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Run Wave A tests (Profiles & Playlists)
        run: npm run test:waveA
        timeout-minutes: 10

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "JWT_SECRET=test_jwt_secret_for_ci" >> $GITHUB_ENV
          echo "SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=test_anon_key" >> $GITHUB_ENV
          echo "FEATURE_PROFILES=true" >> $GITHUB_ENV
          echo "FEATURE_PLAYLISTS=true" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "PORT=3001" >> $GITHUB_ENV

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Build application
        run: npm run build

      - name: Run Wave A tests (Profiles & Playlists)
        run: npm run test:waveA
        timeout-minutes: 15

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'seda'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nodeAuditSkipDevDependencies

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Artillery
        run: npm install -g artillery

      - name: Setup environment
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Build and start application
        run: |
          npm run build
          npm run start:prod &
          sleep 10

      - name: Run performance tests
        run: |
          if [ -f "test/performance/chat-load-test.yml" ]; then
            artillery run test/performance/chat-load-test.yml
          else
            echo "Performance tests not configured yet"
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, integration-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed!"
            exit 0
          else
            echo "‚ùå Some tests failed:"
            echo "Lint & TypeCheck: ${{ needs.lint-and-typecheck.result }}"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "Integration Tests: ${{ needs.integration-tests.result }}"
            echo "E2E Tests: ${{ needs.e2e-tests.result }}"
            echo "Security Tests: ${{ needs.security-tests.result }}"
            exit 1
          fi

      - name: Post to Slack on failure
        if: failure() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: 'üö® Test suite failed on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
